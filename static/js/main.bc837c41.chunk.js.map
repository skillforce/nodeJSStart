{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","userRef","useRef","useState","users","setUsers","edit","setEdit","inputValue","setInputValue","instance","getUsers","axios","get","window","location","search","then","res","data","useEffect","onChaneInputHandler","e","currentTarget","value","onChangeEditMade","newStatus","type","ref","map","t","defaultValue","name","onChange","onClick","id","_id","put","onDoubleClick","delete","post","current","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOA4DeA,EAvDH,WAGR,IAAIC,EAAUC,iBAAyB,MAHzB,EAMYC,mBAAe,CAAC,KAN5B,mBAMPC,EANO,KAMAC,EANA,OAOUF,oBAAkB,GAP5B,mBAOPG,EAPO,KAODC,EAPC,OAQsBJ,mBAAiB,IARvC,mBAQPK,EARO,KAQKC,EARL,KAURC,EAAW,2CAEXC,EAAW,WACbC,IAAMC,IAAIH,EAAU,SAAWI,OAAOC,SAASC,QAAQC,MAAK,SAAAC,GAAG,OAAGb,EAASa,EAAIC,UAInFC,qBAAU,WACNT,MACD,IAEH,IAOMU,EAAsB,SAACC,GACzBb,EAAca,EAAEC,cAAcC,QAO5BC,EAAmB,SAACC,GACtBnB,EAAQmB,IAGZ,OACI,gCACI,uBAAOC,KAAM,OAAQC,IAAK3B,IACzBG,EAAMyB,KAAI,SAACC,GAAD,OAAa,8BAClBxB,EAEE,gCAAsB,uBAAQyB,aAAcD,EAAEE,KAAMC,SAAUZ,IAC1D,wBAAQa,QAAS,kBAhBbC,EAgBkCL,EAAEM,IAhBxBJ,EAgB6BxB,OAf7DI,IAAMyB,IAAI3B,EAAS,SAAU,CAACyB,KAAIH,SAC7Bf,MAAK,SAAAC,GAAG,OAAIP,OACZM,MAAK,SAAAC,GAAG,OAAIO,GAAiB,MAHf,IAACU,EAAYH,GAgBhB,oBADMF,EAAEM,IAAK,KAFZ,8BAAqB,uBAAME,cAAe,kBAAMb,GAAiB,IAA5C,kBAAyDK,EAAEE,KACjF,wBAAQE,QAAS,kBApBHC,EAoBkCL,EAAEM,SAnBlExB,IAAM2B,OAAO7B,EAAS,UAAD,OAAWyB,IAAOlB,MAAK,SAAAC,GAAG,OAAIP,OADtB,IAACwB,GAoBd,mBADWL,EAAEM,IAAI,MADKN,EAAEM,QAMpC,wBAAQF,QA5Bc,WAAO,IAAD,EAChCtB,IAAM4B,KAAK9B,EAAS,SAAU,CAACsB,KAAI,UAAE/B,EAAQwC,eAAV,aAAE,EAAiBjB,QAAQP,MAAK,SAAAC,GAAG,OAAIP,QA2BtE,0BCxCG+B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bc837c41.chunk.js","sourcesContent":["import React, {ChangeEvent, useEffect, useRef, useState} from 'react';\nimport './App.css';\nimport axios from 'axios';\n\n\nconst App = () => {\n\n\n    let userRef = useRef<HTMLInputElement>(null);\n\n\n    const [users, setUsers] = useState<{}[]>([{}])\n    const [edit, setEdit] = useState<boolean>(false)\n    const [inputValue, setInputValue] = useState<string>('')\n\n    const instance = 'https://frozen-brook-01952.herokuapp.com'\n\n    const getUsers = () => {\n        axios.get(instance +'/users' + window.location.search).then(res =>setUsers(res.data))\n        }\n\n\n    useEffect(() => {\n        getUsers()\n    }, [])\n\n    const onClickAddUserHandler = () => {\n        axios.post(instance+'/users', {name: userRef.current?.value}).then(res => getUsers())\n    }\n\n    const onClickDeleteUserHandler = (id: string) => {\n        axios.delete(instance+`/users/${id}`,).then(res => getUsers())\n    }\n    const onChaneInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setInputValue(e.currentTarget.value)\n    }\n    const onClickSaveBtn = (id: string, name: string) => {\n        axios.put(instance+'/users', {id, name})\n            .then(res => getUsers())\n            .then(res => onChangeEditMade(false))\n    };\n    const onChangeEditMade = (newStatus: boolean) => {\n        setEdit(newStatus)\n    };\n\n    return (\n        <div>\n            <input type={'text'} ref={userRef}/>\n            {users.map((t: any) => (<div key={t._id}>\n                {!edit ? <div key={t._id+'a'}><span onDoubleClick={() => onChangeEditMade(true)}>Name:{t.name}\n                        <button onClick={() => onClickDeleteUserHandler(t._id)}>X</button></span></div> :\n                    <div key={t._id +'b'}><input  defaultValue={t.name} onChange={onChaneInputHandler}/>\n                        <button onClick={() => onClickSaveBtn(t._id, inputValue)}>SAVE</button>\n                    </div>}</div>))}\n            <button onClick={onClickAddUserHandler}>Add user</button>\n        </div>\n    );\n\n}\n\nexport default App\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}